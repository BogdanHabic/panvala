/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from 'ethers';
import { Provider } from 'ethers/providers';
import { BigNumber } from 'ethers/utils';
import { TransactionOverrides } from '.';

export class Gatekeeper extends Contract {
  functions: {
    voteTokenBalance(arg0: string): Promise<BigNumber>;

    delegate(arg0: string): Promise<string>;

    ballots(
      arg0: number | string | BigNumber
    ): Promise<{
      contestCount: BigNumber;
      created: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    requests(
      arg0: number | string | BigNumber
    ): Promise<{
      metadataHash: (string)[];
      resource: string;
      approved: boolean;
      expirationTime: BigNumber;
      0: (string)[];
      1: string;
      2: boolean;
      3: BigNumber;
    }>;

    slates(
      arg0: number | string | BigNumber
    ): Promise<{
      recommender: string;
      metadataHash: (string)[];
      status: number;
      staker: string;
      stake: BigNumber;
      epochNumber: BigNumber;
      resource: string;
      0: string;
      1: (string)[];
      2: number;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
    }>;

    epochStart(epoch: number | string | BigNumber): Promise<BigNumber>;

    slateRequests(slateID: number | string | BigNumber): Promise<(BigNumber)[]>;

    didCommit(ballotID: number | string | BigNumber, voter: string): Promise<boolean>;

    getCommitHash(ballotID: number | string | BigNumber, voter: string): Promise<string>;

    getFirstChoiceVotes(
      ballotID: number | string | BigNumber,
      resource: string,
      slateID: number | string | BigNumber
    ): Promise<BigNumber>;

    getSecondChoiceVotes(
      ballotID: number | string | BigNumber,
      resource: string,
      slateID: number | string | BigNumber
    ): Promise<BigNumber>;

    didReveal(ballotID: number | string | BigNumber, voter: string): Promise<boolean>;

    contestStatus(ballotID: number | string | BigNumber, resource: string): Promise<number>;

    contestSlates(ballotID: number | string | BigNumber, resource: string): Promise<(BigNumber)[]>;

    getWinningSlate(ballotID: number | string | BigNumber, resource: string): Promise<BigNumber>;

    hasPermission(requestID: number | string | BigNumber): Promise<boolean>;

    slateSubmissionDeadline(
      epochNumber: number | string | BigNumber,
      resource: string
    ): Promise<BigNumber>;

    timeTravel(
      amount: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    recommendSlate(
      resource: string,
      requestIDs: (number | string | BigNumber)[],
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    stakeTokens(
      slateID: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawStake(
      slateID: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositVoteTokens(
      numTokens: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawVoteTokens(
      numTokens: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    delegateVotingRights(
      _delegate: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    commitBallot(
      voter: string,
      commitHash: string,
      numTokens: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    revealBallot(
      epochNumber: number | string | BigNumber,
      voter: string,
      resources: (string)[],
      firstChoices: (number | string | BigNumber)[],
      secondChoices: (number | string | BigNumber)[],
      salt: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    revealManyBallots(
      epochNumber: number | string | BigNumber,
      _voters: (string)[],
      _ballots: ((string)[])[],
      _salts: (number | string | BigNumber)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    countVotes(
      ballotID: number | string | BigNumber,
      resource: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    countRunoffVotes(
      ballotID: number | string | BigNumber,
      resource: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    donateChallengerStakes(
      ballotID: number | string | BigNumber,
      resource: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestPermission(
      metadataHash: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestCount(): Promise<BigNumber>;
    startTime(): Promise<BigNumber>;
    COMMIT_PERIOD_START(): Promise<BigNumber>;
    parameters(): Promise<string>;
    slateCount(): Promise<BigNumber>;
    REVEAL_PERIOD_START(): Promise<BigNumber>;
    EPOCH_LENGTH(): Promise<BigNumber>;
    currentEpochNumber(): Promise<BigNumber>;
    token(): Promise<string>;
  };
  filters: {
    PermissionRequested(resource: null, requestID: null, metadataHash: null): EventFilter;

    SlateCreated(slateID: null, recommender: string | null, metadataHash: null): EventFilter;

    SlateStaked(slateID: null, staker: string | null, numTokens: null): EventFilter;

    VotingTokensDeposited(voter: string | null, numTokens: null): EventFilter;

    VotingTokensWithdrawn(voter: string | null, numTokens: null): EventFilter;

    DelegateSet(voter: string | null, delegate: null): EventFilter;

    BallotCommitted(
      ballotID: number | string | BigNumber | null,
      voter: string | null,
      numTokens: null,
      commitHash: null
    ): EventFilter;

    BallotRevealed(
      ballotID: number | string | BigNumber | null,
      voter: string | null,
      numTokens: null
    ): EventFilter;

    ContestAutomaticallyFinalized(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null
    ): EventFilter;

    ConfidenceVoteCounted(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null,
      votes: null,
      totalVotes: null
    ): EventFilter;

    ConfidenceVoteFinalized(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null
    ): EventFilter;

    ConfidenceVoteFailed(ballotID: number | string | BigNumber | null, resource: null): EventFilter;

    RunoffStarted(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null,
      runnerUpSlate: null
    ): EventFilter;

    RunoffCounted(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null,
      winnerVotes: null,
      losingSlate: null,
      loserVotes: null
    ): EventFilter;

    RunoffFinalized(
      ballotID: number | string | BigNumber | null,
      resource: string | null,
      winningSlate: null
    ): EventFilter;

    StakeWithdrawn(slateID: null, staker: string | null, numTokens: null): EventFilter;

    TimeTraveled(amount: null, startTime: null): EventFilter;
  };
}
